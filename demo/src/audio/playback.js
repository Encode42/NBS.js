import{getElements,getSong}from"../util/globals.js";import{decodeAudioData,playNote}from"./audio.js";const instrumentMap=new Map;let stopPlaying=!0,currentTick=-1,currentLoop=0;async function prepareSong(){await Promise.all(getSong().instruments.map(t=>t.builtIn?fetch(t.audioSrc).then(e=>e.arrayBuffer()).then(e=>decodeAudioData(e)).then(e=>t.audioBuffer=e).then(()=>instrumentMap.set(t.name,t)):null)),getElements().toggle.playback.looping.disabled=!getSong().song.loopEnabled,getElements().toggle.playback.looping.checked=getSong().song.loopEnabled}function startSong(){stopPlaying=!1,getElements().button.playback.toggle.dataset.toggled="true",playSong()}function stopSong(){getElements().button.playback.toggle.dataset.toggled="false",stopPlaying=!0}function resetSong(){stopSong(),currentTick=-1,currentLoop=0}async function playSong(){if(getSong())for(var t=getSong().song.layers.length;!stopPlaying;){for(let e=0;e<t;e++){var n=getSong().song.layers[e];if(!n.locked){var o=n?.notes[currentTick];if(o){let e=(o.panning+n.panning)/2,t=o.pitch;getElements().toggle.playback.parity.checked&&(e=0===n.panning?o.panning:e,t-=20),playNote(o.key,instrumentMap.get(o.instrument.name),o.velocity*n.velocity/100,e,t)}}}await new Promise(e=>setTimeout(e,getSong().timePerTick)),currentTick++,currentTick===getSong().song.size&&(getElements().toggle.playback.looping.checked&&(0===getSong().song.maxLoopCount||currentLoop<getSong().song.maxLoopCount)?(currentLoop++,currentTick=getSong().song.loopStartTick):resetSong())}}export{prepareSong,startSong,stopSong,resetSong,playSong};