import{getElements,getInstruments,getLoadedInstruments,pushLoadedInstruments,getSong,setInstruments}from"../util/globals.js";import{decodeAudioData,playNote}from"./audio.js";let stopPlaying=!0,currentTick=-1,currentLoop=0;function startSong(){stopPlaying=!1,getElements().button.playback.toggle.dataset.toggled="true",playSong()}function stopSong(){delete getElements().button.playback.toggle.dataset.toggled,stopPlaying=!0}function resetSong(){stopSong(),currentTick=-1,currentLoop=0}async function playSong(){if(getSong()){const r=getInstruments();for(var e=getSong().hasSolo,o=getSong().layers.length;!stopPlaying;){for(let t=0;t<o;t++){var n=getSong().layers[t];if((!e||n.solo)&&!n.locked){var g=n?.notes[currentTick];if(g){let t=(g.panning+n.panning)/2,e=g.pitch;getElements().toggle.playback.parity.checked&&(t=0===n.panning?g.panning:t,e-=2),playNote(g.key,r.get(g.instrument.name),g.velocity*n.velocity/100,t,e)}}}await new Promise(t=>setTimeout(t,getSong().timePerTick)),currentTick++,currentTick===getSong().size&&(getElements().toggle.playback.looping.checked&&(0===getSong().maxLoopCount||currentLoop<getSong().maxLoopCount)?(currentLoop++,currentTick=getSong().loopStartTick):resetSong())}}}export{startSong,stopSong,resetSong,playSong};